{"version":3,"sources":["components/App/App.js","reportWebVitals.js","index.js"],"names":["App","fileType","setFileType","useState","filename","setFilename","blobSetted","setBlobSetted","blob","setBlob","clipboard","useClipboard","onError","alert","copyName","useCallback","copy","concat","copyData","index","_jsxs","children","_jsx","className","htmlFor","type","id","name","required","placeholder","onChange","e","file","files","img","Image","setAttribute","src","window","URL","createObjectURL","onload","len","Math","floor","size","binaryData","push","url","Blob","reader","FileReader","readAsDataURL","ref","result","length","arr","console","log","i","target","slice","ceil","setValue","onClick","map","btn","ind","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"iLAuHeA,MApHf,WACE,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAUC,GAAeF,mBAAS,KAClCG,EAAYC,GAAiBJ,oBAAS,IACtCK,EAAMC,GAAWN,mBAAS,IAE3BO,EAAYC,uBAAa,CAC7BC,UACEC,MAAM,mLACR,IAGIC,EAAWC,uBAAY,KAC3BL,EAAUM,KAAK,GAADC,OAAIb,EAAQ,KAAAa,OAAIhB,GAAW,GACxC,CAACS,EAAWT,EAAUG,IAEnBc,EAAWH,uBACdI,IAcCT,EAAUM,KAAKR,EAAKW,GAAO,GAE7B,CAACX,EAAME,IA6CT,OACEU,eAAA,WAAAC,SAAA,CACED,eAAA,QAAAC,SAAA,CACEC,cAAA,SAAOC,UAAU,cAAcC,QAAQ,aAAYH,SAAC,wHAGpDC,cAAA,SACEC,UAAU,cACVE,KAAK,OACLC,GAAG,aACHC,KAAK,aACLC,UAAU,EACVC,YAAY,sHACZC,SAAWC,GAvDnB,SAAkBA,GAChB,MACMC,EADWD,EAAEE,MACG,GAChBC,EAAM,IAAIC,MAChBD,EAAIE,aAAa,cAAe,aAChCF,EAAIG,IAAMC,OAAOC,IAAIC,gBAAgBR,GACrCE,EAAIO,OAAS,WACX,MAAMhB,EAAOO,EAAKP,KAClBvB,EAAYuB,GACZ,MAAMiB,EAAMC,KAAKC,MAAMZ,EAAKa,KAAO,KACnC,IAAIC,EAAa,GACjBA,EAAWC,KAAKf,GAChB,MAAMgB,EAAM,IAAIC,KAAKH,EAAY,CAAErB,KAAMA,IACzC,IAAIyB,EAAS,IAAIC,WACjBD,EAAOE,cAAcJ,GACrBE,EAAOT,OAAS,WACd,MAAMY,EAAMH,EAAOI,OAEnB,GAAIZ,EAAM,EACRjC,EAAQ,CAAC4C,IACT9C,GAAc,OACT,CACL,MAAMgD,EAASF,EAAIE,OACbC,EAAM,GACZC,QAAQC,IAAIH,EAAQF,EAAIE,EAAS,IAEjC,IAAK,IAAII,EAAI,EAAGA,GAAKjB,EAAKiB,IAAK,CAC7B,MAAMC,EAASP,EAAIQ,MACjBF,EAAIhB,KAAKmB,KAAKP,GAAUb,EAAM,KAC7BiB,EAAI,GAAKhB,KAAKmB,KAAKP,GAAUb,EAAM,IAAM,GAE5Ce,QAAQC,IAAIE,EAAOL,OAAQK,EAAOA,EAAOL,OAAS,IAClDC,EAAIT,KAAKa,EACX,CACAnD,EAAQ+C,GACRjD,GAAc,EAChB,CACF,EACAF,EAAY2B,EAAKL,KACnB,CACF,CAeyBoC,CAAShC,EAAE6B,UAE7BxD,KAEFE,EACCc,eAAA,WAAAC,SAAA,CACEC,cAAA,UAAQ0C,QAASlD,EAASO,SAAEjB,IAC3BI,EAAKyD,KAAI,CAACC,EAAKC,IACd7C,cAAA,UAEE0C,QAASA,KACP9C,EAASiD,EAAI,EACb9C,SAED6C,EAAIX,QALAY,QAUX,KAIR,ECzGeC,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHFS,IAASC,OACPzD,cAAC0D,IAAMC,WAAU,CAAA5D,SACfC,cAACtB,EAAG,MAENkF,SAASC,eAAe,SAG1Bf,G","file":"static/js/main.f4120729.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { useClipboard } from \"use-clipboard-copy\";\n\nfunction App() {\n  const [fileType, setFileType] = useState(\"\");\n  const [filename, setFilename] = useState(\"\");\n  const [blobSetted, setBlobSetted] = useState(false);\n  const [blob, setBlob] = useState([]);\n\n  const clipboard = useClipboard({\n    onError() {\n      alert(\"Произошла непредвиденная ошибка\");\n    },\n  });\n\n  const copyName = useCallback(() => {\n    clipboard.copy(`${filename}.${fileType}`);\n  }, [clipboard, fileType, filename]);\n\n  const copyData = useCallback(\n    (index) => {\n      /* const sqrt = Math.sqrt(blob[index].length)\n      const frLen = Math.ceil(blob[index].length / sqrt)\n      const arr = []\n\n      for (let i = 0; i < sqrt; i++) {\n        arr.push(blob[index].slice(i * frLen, (i + 1) * frLen - 1))\n      }\n\n      if(blob[index].slice(sqrt * frLen).length > 0) {\n        arr.push(blob[index].slice(sqrt * frLen))\n      }\n      console.log(arr, blob[index].slice(-10))\n      const ja = JSON.stringify(arr) */\n      clipboard.copy(blob[index]);\n    },\n    [blob, clipboard]\n  );\n\n  function setValue(e) {\n    const fileList = e.files;\n    const file = fileList[0];\n    const img = new Image();\n    img.setAttribute(\"crossOrigin\", \"anonymous\");\n    img.src = window.URL.createObjectURL(file);\n    img.onload = function () {\n      const type = file.type;\n      setFileType(type);\n      const len = Math.floor(file.size / 800000);\n      var binaryData = [];\n      binaryData.push(file);\n      const url = new Blob(binaryData, { type: type });\n      let reader = new FileReader();\n      reader.readAsDataURL(url);\n      reader.onload = function () {\n        const ref = reader.result;\n\n        if (len < 1) {\n          setBlob([ref])\n          setBlobSetted(true);;\n        } else {\n          const length = ref.length;\n          const arr = [];\n          console.log(length, ref[length - 1])\n\n          for (let i = 0; i <= len; i++) {\n            const target = ref.slice(\n              i * Math.ceil(length / (len + 1)),\n              (i + 1) * Math.ceil(length / (len + 1)) - 1\n            );\n            console.log(target.length, target[target.length - 1])\n            arr.push(target);\n          }\n          setBlob(arr);\n          setBlobSetted(true);\n        }\n      };\n      setFilename(file.name);\n    };\n  }\n\n  return (\n    <section>\n      <form>\n        <label className=\"Popup-label\" htmlFor=\"input_file\">\n          Выберите изображение\n        </label>\n        <input\n          className=\"Popup-input\"\n          type=\"file\"\n          id=\"input_file\"\n          name=\"input_file\"\n          required={true}\n          placeholder=\"Выберите изображение\"\n          onChange={(e) => setValue(e.target)}\n        />\n        {filename}\n      </form>\n      {blobSetted ? (\n        <article>\n          <button onClick={copyName}>{filename}</button>\n          {blob.map((btn, ind) => (\n            <button\n              key={ind}\n              onClick={() => {\n                copyData(ind);\n              }}\n            >\n              {btn.length}\n            </button>\n          ))}\n        </article>\n      ) : (\n        \"\"\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}